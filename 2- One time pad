import java.util.Scanner;

public class OneTimePad {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get user input for plaintext
        System.out.print("Enter plaintext: ");
        String plaintext = scanner.nextLine().toUpperCase();

        // Get user input for key in ASCII or numerical form
        System.out.print("Enter key (ASCII or numerical): ");
        String keyInput = scanner.nextLine();
        int[] key = convertInputToNumerical(keyInput);

        // Convert plaintext to numerical form
        int[] numericalPlaintext = convertStringToNumerical(plaintext);

        // Ensure key and plaintext have the same length
        if (numericalPlaintext.length != key.length) {
            System.out.println("Error: The length of the key must be the same as the length of the plaintext.");
            return;
        }

        // Calculate numerical ciphertext
        int[] numericalCiphertext = new int[plaintext.length()];
        for (int i = 0; i < plaintext.length(); i++) {
            numericalCiphertext[i] = (numericalPlaintext[i] + key[i]) % 26;
        }

        // Output results in binary form
        System.out.println("Numerical Plaintext (Binary): " + arrayToBinaryString(numericalPlaintext));
        System.out.println("Numerical Key (Binary): " + arrayToBinaryString(key));
        System.out.println("Numerical Ciphertext (Binary): " + arrayToBinaryString(numericalCiphertext));
        
        // Output results in ASCII form
        System.out.println("Ciphertext (ASCII): " + arrayToASCIIString(numericalCiphertext));
    }

    private static int[] convertInputToNumerical(String input) {
        int[] result = new int[input.length()];
        for (int i = 0; i < input.length(); i++) {
            try {
                result[i] = Integer.parseInt(String.valueOf(input.charAt(i)));
            } catch (NumberFormatException e) {
                // If parsing as integer fails, assume it's ASCII and convert to numerical
                result[i] = input.charAt(i) - 'A';
            }
        }
        return result;
    }

    private static int[] convertStringToNumerical(String input) {
        int[] result = new int[input.length()];
        for (int i = 0; i < input.length(); i++) {
            result[i] = input.charAt(i) - 'A';
        }
        return result;
    }

    private static String arrayToBinaryString(int[] array) {
        StringBuilder sb = new StringBuilder();
        for (int num : array) {
            sb.append(Integer.toBinaryString(num)).append(" ");
        }
        return sb.toString().trim();
    }

    private static String arrayToASCIIString(int[] array) {
        StringBuilder sb = new StringBuilder();
        for (int num : array) {
            sb.append((char) (num + 'A'));
        }
        return sb.toString();
    }
}
